// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: identities.sql

package dbpostgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIdentity = `-- name: CreateIdentity :one
INSERT INTO identities (user_id, type, value, verified, created_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, type, value, verified, created_at
`

type CreateIdentityParams struct {
	UserID    string           `json:"user_id"`
	Type      string           `json:"type"`
	Value     string           `json:"value"`
	Verified  bool             `json:"verified"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateIdentity(ctx context.Context, arg CreateIdentityParams) (Identity, error) {
	row := q.db.QueryRow(ctx, createIdentity,
		arg.UserID,
		arg.Type,
		arg.Value,
		arg.Verified,
		arg.CreatedAt,
	)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Value,
		&i.Verified,
		&i.CreatedAt,
	)
	return i, err
}

const deleteIdentitiesByUserID = `-- name: DeleteIdentitiesByUserID :exec
DELETE FROM identities
WHERE user_id = $1
`

func (q *Queries) DeleteIdentitiesByUserID(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteIdentitiesByUserID, userID)
	return err
}

const deleteIdentity = `-- name: DeleteIdentity :exec
DELETE FROM identities
WHERE id = $1
`

func (q *Queries) DeleteIdentity(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteIdentity, id)
	return err
}

const getIdentitiesByUserID = `-- name: GetIdentitiesByUserID :many
SELECT id, user_id, type, value, verified, created_at FROM identities
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetIdentitiesByUserID(ctx context.Context, userID string) ([]Identity, error) {
	rows, err := q.db.Query(ctx, getIdentitiesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Identity
	for rows.Next() {
		var i Identity
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.Value,
			&i.Verified,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIdentityByID = `-- name: GetIdentityByID :one
SELECT id, user_id, type, value, verified, created_at FROM identities
WHERE id = $1
`

func (q *Queries) GetIdentityByID(ctx context.Context, id string) (Identity, error) {
	row := q.db.QueryRow(ctx, getIdentityByID, id)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Value,
		&i.Verified,
		&i.CreatedAt,
	)
	return i, err
}

const getIdentityByTypeAndValue = `-- name: GetIdentityByTypeAndValue :one
SELECT id, user_id, type, value, verified, created_at FROM identities
WHERE type = $1 AND value = $2
`

type GetIdentityByTypeAndValueParams struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

func (q *Queries) GetIdentityByTypeAndValue(ctx context.Context, arg GetIdentityByTypeAndValueParams) (Identity, error) {
	row := q.db.QueryRow(ctx, getIdentityByTypeAndValue, arg.Type, arg.Value)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Value,
		&i.Verified,
		&i.CreatedAt,
	)
	return i, err
}

const updateIdentityValue = `-- name: UpdateIdentityValue :one
UPDATE identities
SET value = $2
WHERE id = $1
RETURNING id, user_id, type, value, verified, created_at
`

type UpdateIdentityValueParams struct {
	ID    string `json:"id"`
	Value string `json:"value"`
}

func (q *Queries) UpdateIdentityValue(ctx context.Context, arg UpdateIdentityValueParams) (Identity, error) {
	row := q.db.QueryRow(ctx, updateIdentityValue, arg.ID, arg.Value)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Value,
		&i.Verified,
		&i.CreatedAt,
	)
	return i, err
}

const updateIdentityVerified = `-- name: UpdateIdentityVerified :one
UPDATE identities
SET verified = $2
WHERE id = $1
RETURNING id, user_id, type, value, verified, created_at
`

type UpdateIdentityVerifiedParams struct {
	ID       string `json:"id"`
	Verified bool   `json:"verified"`
}

func (q *Queries) UpdateIdentityVerified(ctx context.Context, arg UpdateIdentityVerifiedParams) (Identity, error) {
	row := q.db.QueryRow(ctx, updateIdentityVerified, arg.ID, arg.Verified)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Value,
		&i.Verified,
		&i.CreatedAt,
	)
	return i, err
}
