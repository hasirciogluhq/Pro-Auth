// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: memberships.sql

package dbpostgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMembership = `-- name: CreateMembership :one
INSERT INTO memberships (user_id, namespace_id, role, created_at)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, namespace_id, role, created_at
`

type CreateMembershipParams struct {
	UserID      string           `json:"user_id"`
	NamespaceID string           `json:"namespace_id"`
	Role        string           `json:"role"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateMembership(ctx context.Context, arg CreateMembershipParams) (Membership, error) {
	row := q.db.QueryRow(ctx, createMembership,
		arg.UserID,
		arg.NamespaceID,
		arg.Role,
		arg.CreatedAt,
	)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NamespaceID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMembership = `-- name: DeleteMembership :exec
DELETE FROM memberships
WHERE id = $1
`

func (q *Queries) DeleteMembership(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteMembership, id)
	return err
}

const deleteMembershipsByNamespaceID = `-- name: DeleteMembershipsByNamespaceID :exec
DELETE FROM memberships
WHERE namespace_id = $1
`

func (q *Queries) DeleteMembershipsByNamespaceID(ctx context.Context, namespaceID string) error {
	_, err := q.db.Exec(ctx, deleteMembershipsByNamespaceID, namespaceID)
	return err
}

const deleteMembershipsByUserID = `-- name: DeleteMembershipsByUserID :exec
DELETE FROM memberships
WHERE user_id = $1
`

func (q *Queries) DeleteMembershipsByUserID(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteMembershipsByUserID, userID)
	return err
}

const getMembershipByID = `-- name: GetMembershipByID :one
SELECT id, user_id, namespace_id, role, created_at FROM memberships
WHERE id = $1
`

func (q *Queries) GetMembershipByID(ctx context.Context, id string) (Membership, error) {
	row := q.db.QueryRow(ctx, getMembershipByID, id)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NamespaceID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getMembershipByUserAndNamespace = `-- name: GetMembershipByUserAndNamespace :one
SELECT id, user_id, namespace_id, role, created_at FROM memberships
WHERE user_id = $1 AND namespace_id = $2
`

type GetMembershipByUserAndNamespaceParams struct {
	UserID      string `json:"user_id"`
	NamespaceID string `json:"namespace_id"`
}

func (q *Queries) GetMembershipByUserAndNamespace(ctx context.Context, arg GetMembershipByUserAndNamespaceParams) (Membership, error) {
	row := q.db.QueryRow(ctx, getMembershipByUserAndNamespace, arg.UserID, arg.NamespaceID)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NamespaceID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getMembershipsByNamespaceID = `-- name: GetMembershipsByNamespaceID :many
SELECT id, user_id, namespace_id, role, created_at FROM memberships
WHERE namespace_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetMembershipsByNamespaceID(ctx context.Context, namespaceID string) ([]Membership, error) {
	rows, err := q.db.Query(ctx, getMembershipsByNamespaceID, namespaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.NamespaceID,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMembershipsByUserID = `-- name: GetMembershipsByUserID :many
SELECT id, user_id, namespace_id, role, created_at FROM memberships
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetMembershipsByUserID(ctx context.Context, userID string) ([]Membership, error) {
	rows, err := q.db.Query(ctx, getMembershipsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.NamespaceID,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMembershipRole = `-- name: UpdateMembershipRole :one
UPDATE memberships
SET role = $2
WHERE id = $1
RETURNING id, user_id, namespace_id, role, created_at
`

type UpdateMembershipRoleParams struct {
	ID   string `json:"id"`
	Role string `json:"role"`
}

func (q *Queries) UpdateMembershipRole(ctx context.Context, arg UpdateMembershipRoleParams) (Membership, error) {
	row := q.db.QueryRow(ctx, updateMembershipRole, arg.ID, arg.Role)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NamespaceID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}
