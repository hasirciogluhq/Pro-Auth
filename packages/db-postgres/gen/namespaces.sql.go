// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: namespaces.sql

package dbpostgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNamespace = `-- name: CreateNamespace :one
INSERT INTO namespaces (id, slug, display_name, created_by, created_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, slug, display_name, created_by, created_at
`

type CreateNamespaceParams struct {
	ID          string           `json:"id"`
	Slug        string           `json:"slug"`
	DisplayName string           `json:"display_name"`
	CreatedBy   string           `json:"created_by"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateNamespace(ctx context.Context, arg CreateNamespaceParams) (Namespace, error) {
	row := q.db.QueryRow(ctx, createNamespace,
		arg.ID,
		arg.Slug,
		arg.DisplayName,
		arg.CreatedBy,
		arg.CreatedAt,
	)
	var i Namespace
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.DisplayName,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNamespace = `-- name: DeleteNamespace :exec
DELETE FROM namespaces
WHERE id = $1
`

func (q *Queries) DeleteNamespace(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteNamespace, id)
	return err
}

const getNamespaceByID = `-- name: GetNamespaceByID :one
SELECT id, slug, display_name, created_by, created_at FROM namespaces
WHERE id = $1
`

func (q *Queries) GetNamespaceByID(ctx context.Context, id string) (Namespace, error) {
	row := q.db.QueryRow(ctx, getNamespaceByID, id)
	var i Namespace
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.DisplayName,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getNamespaceBySlug = `-- name: GetNamespaceBySlug :one
SELECT id, slug, display_name, created_by, created_at FROM namespaces
WHERE slug = $1
`

func (q *Queries) GetNamespaceBySlug(ctx context.Context, slug string) (Namespace, error) {
	row := q.db.QueryRow(ctx, getNamespaceBySlug, slug)
	var i Namespace
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.DisplayName,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getNamespacesByCreatedBy = `-- name: GetNamespacesByCreatedBy :many
SELECT id, slug, display_name, created_by, created_at FROM namespaces
WHERE created_by = $1
ORDER BY created_at DESC
`

func (q *Queries) GetNamespacesByCreatedBy(ctx context.Context, createdBy string) ([]Namespace, error) {
	rows, err := q.db.Query(ctx, getNamespacesByCreatedBy, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Namespace
	for rows.Next() {
		var i Namespace
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.DisplayName,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNamespaces = `-- name: ListNamespaces :many
SELECT id, slug, display_name, created_by, created_at FROM namespaces
ORDER BY created_at DESC
`

func (q *Queries) ListNamespaces(ctx context.Context) ([]Namespace, error) {
	rows, err := q.db.Query(ctx, listNamespaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Namespace
	for rows.Next() {
		var i Namespace
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.DisplayName,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNamespaceDisplayName = `-- name: UpdateNamespaceDisplayName :one
UPDATE namespaces
SET display_name = $2
WHERE id = $1
RETURNING id, slug, display_name, created_by, created_at
`

type UpdateNamespaceDisplayNameParams struct {
	ID          string `json:"id"`
	DisplayName string `json:"display_name"`
}

func (q *Queries) UpdateNamespaceDisplayName(ctx context.Context, arg UpdateNamespaceDisplayNameParams) (Namespace, error) {
	row := q.db.QueryRow(ctx, updateNamespaceDisplayName, arg.ID, arg.DisplayName)
	var i Namespace
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.DisplayName,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const updateNamespaceSlug = `-- name: UpdateNamespaceSlug :one
UPDATE namespaces
SET slug = $2
WHERE id = $1
RETURNING id, slug, display_name, created_by, created_at
`

type UpdateNamespaceSlugParams struct {
	ID   string `json:"id"`
	Slug string `json:"slug"`
}

func (q *Queries) UpdateNamespaceSlug(ctx context.Context, arg UpdateNamespaceSlugParams) (Namespace, error) {
	row := q.db.QueryRow(ctx, updateNamespaceSlug, arg.ID, arg.Slug)
	var i Namespace
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.DisplayName,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
